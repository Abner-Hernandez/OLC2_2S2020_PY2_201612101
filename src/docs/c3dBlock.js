/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import InstructionTab from './optimize/InstructionTab';
import Instruction from './optimize/Instruction';
import Type from './optimize/Type';
import { add_console } from './clases/Reports';
export var c3dBlock = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[8,9,14],$V3=[1,9],$V4=[1,21],$V5=[1,22],$V6=[1,23],$V7=[1,24],$V8=[1,25],$V9=[1,26],$Va=[1,30],$Vb=[1,29],$Vc=[1,28],$Vd=[13,14,19,23,35,36,40,42,46,47],$Ve=[7,13,19,23,35,36,40,42,45,46,47],$Vf=[12,15],$Vg=[1,61],$Vh=[1,57],$Vi=[1,59],$Vj=[1,58],$Vk=[1,60],$Vl=[1,78],$Vm=[1,79],$Vn=[1,80],$Vo=[1,81],$Vp=[1,82],$Vq=[15,22,39,48,49,50,51,52,53,54,55,56,57,58],$Vr=[2,57],$Vs=[2,58];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"IMPORT":4,"DECLA":5,"INSTRUCTIONS":6,"EOF":7,"resinclude1":8,"resinclude2":9,"DECLARATION":10,"LISTID":11,"coma":12,"id":13,"resvar":14,"puntocoma":15,"igual":16,"EXP":17,"EXP2":18,"resstack":19,"llavea":20,"number":21,"llavec":22,"resheap":23,"BLOCK":24,"INSTRUCTION":25,"ASSIGNMENT":26,"LABEL":27,"GOTO":28,"IF":29,"PRINT":30,"PROC":31,"CALL":32,"RETURNTT":33,"dospuntos":34,"resgoto":35,"resif":36,"parenta":37,"EXPRT":38,"parentc":39,"resprint":40,"cprint":41,"resint":42,"RETT":43,"corchetea":44,"corchetec":45,"resvoid":46,"resreturn":47,"diferente":48,"identico":49,"mayor":50,"menor":51,"mayorigual":52,"menorigual":53,"suma":54,"resta":55,"multiplicacion":56,"slash":57,"modulo":58,"resnull":59,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",8:"resinclude1",9:"resinclude2",12:"coma",13:"id",14:"resvar",15:"puntocoma",16:"igual",19:"resstack",20:"llavea",21:"number",22:"llavec",23:"resheap",34:"dospuntos",35:"resgoto",36:"resif",37:"parenta",39:"parentc",40:"resprint",41:"cprint",42:"resint",44:"corchetea",45:"corchetec",46:"resvoid",47:"resreturn",48:"diferente",49:"identico",50:"mayor",51:"menor",52:"mayorigual",53:"menorigual",54:"suma",55:"resta",56:"multiplicacion",57:"slash",58:"modulo",59:"resnull"},
productions_: [0,[3,5],[3,1],[4,1],[4,1],[5,2],[5,1],[11,3],[11,1],[10,3],[10,5],[10,5],[10,6],[10,6],[24,1],[24,0],[6,2],[6,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[26,4],[26,4],[26,7],[26,7],[26,7],[26,7],[27,2],[28,3],[29,7],[30,7],[30,10],[31,7],[31,5],[43,1],[43,1],[32,4],[33,2],[33,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[17,3],[17,3],[17,3],[17,3],[17,3],[18,1],[18,2],[18,4],[18,4],[18,1],[18,1],[18,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

          let tab = new InstructionTab();
          this.$ = $$[$0-4];
          this.$ = this.$.concat($$[$0-3]);
          this.$ = this.$.concat($$[$0-2]);
          this.$ = this.$.concat($$[$0-1]);
          //console.log($$[$0-4])
          tab.instructions = this.$;
          //return tab.operateBlock();
          //tab.operate()
          let m = tab.operate();
          //console.log(m);
          for(let aux of tab.Roptimize)
          {
               try{ add_console( JSON.stringify(aux) ); }catch(e){ console.log(e); }
          }
          //console.log(tab.Roptimize);
          return m;

     
break;
case 2:
let tab1 = new InstructionTab(); tab.instructions = []; return tab.operateBlock();
break;
case 3: case 4:
 this.$ = [new Instruction($$[$0],null,null,null,Type.IMPORT,0,this._$.first_line,this._$.first_column)]; 
break;
case 5: case 16:
this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
break;
case 6: case 14: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25:
this.$ = $$[$0];
break;
case 7:
this.$ = $$[$0-2]; this.$ += ','+$$[$0];
break;
case 8:
this.$ = ''+$$[$0];
break;
case 9:
this.$ = [new Instruction($$[$0-1],null,null,null,Type.DECLARATION,1,this._$.first_line,this._$.first_column)];
break;
case 10:
this.$ = [new Instruction($$[$0-3],$$[$0-1].op,$$[$0-1].left,$$[$0-1].right,Type.DECLARATION,2,this._$.first_line,this._$.first_column)];
break;
case 11:
this.$ = [new Instruction($$[$0-3],null,$$[$0-1],null,Type.DECLARATION,3,this._$.first_line,this._$.first_column)];
break;
case 12:
this.$ = [new Instruction(Type.STACK,$$[$0-2],'[',']',Type.DECLARATION,4,this._$.first_line,this._$.first_column)];
break;
case 13:
this.$ = [new Instruction(Type.HEAP,$$[$0-2],'[',']',Type.DECLARATION,5,this._$.first_line,this._$.first_column)];
break;
case 15:
this.$ = [];
break;
case 17:
this.$ = []; this.$ = this.$.concat($$[$0])
break;
case 26:
this.$ = [new Instruction($$[$0-3],$$[$0-1].op,$$[$0-1].left,$$[$0-1].right,Type.ASSIGNMENT,1,this._$.first_line,this._$.first_column)];
break;
case 27:
this.$ = [new Instruction($$[$0-3],null,$$[$0-1],null,Type.ASSIGNMENT,2,this._$.first_line,this._$.first_column)];
break;
case 28:
this.$ = [new Instruction($$[$0-6],null,Type.STACK,$$[$0-2],Type.ASSIGNMENT,3,this._$.first_line,this._$.first_column)];
break;
case 29:
this.$ = [new Instruction($$[$0-6],null,Type.HEAP,$$[$0-2],Type.ASSIGNMENT,4,this._$.first_line,this._$.first_column)];
break;
case 30:
this.$ = [new Instruction(Type.STACK,null,$$[$0-4],$$[$0-1],Type.ASSIGNMENT,5,this._$.first_line,this._$.first_column)];
break;
case 31:
this.$ = [new Instruction(Type.HEAP,null,$$[$0-4],$$[$0-1],Type.ASSIGNMENT,6,this._$.first_line,this._$.first_column)];
break;
case 32:
this.$ = [new Instruction($$[$0-1],null,null,null,Type.LABEL,0,this._$.first_line,this._$.first_column)];
break;
case 33:
this.$ = [new Instruction($$[$0-1],null,null,null,Type.GOTO,0,this._$.first_line,this._$.first_column)];
break;
case 34:
this.$ = [new Instruction($$[$0-1],$$[$0-4].op,$$[$0-4].left,$$[$0-4].right,Type.IF,0,this._$.first_line,this._$.first_column)];
break;
case 35:
this.$ = [new Instruction(null,null,$$[$0-4],$$[$0-2],Type.PRINT,1,this._$.first_line,this._$.first_column)];
break;
case 36:
this.$ = [new Instruction(null,null,$$[$0-7],$$[$0-2],Type.PRINT,2,this._$.first_line,this._$.first_column)];
break;
case 37:
this.$ = [new Instruction($$[$0-5],$$[$0-6],null,null,Type.PROC,0,this._$.first_line,this._$.first_column)]; this.$ = this.$.concat($$[$0-1]); this.$.push(new Instruction('end',null,null,null,Type.END,this._$.first_line,this._$.first_column))
break;
case 38:
 this.$ = [new Instruction($$[$0-3],$$[$0-4],null,null,Type.PROTOTYPE,0,this._$.first_line,this._$.first_column)]; 
break;
case 41:
this.$ = [new Instruction($$[$0-3],null,null,null,Type.CALL,0,this._$.first_line,this._$.first_column)];
break;
case 42:
this.$ = [new Instruction(null,null,null,null,Type.RETURN,1,this._$.first_line,this._$.first_column)];
break;
case 43:
this.$ = [new Instruction($$[$0-1],null,null,null,Type.RETURN,2,this._$.first_line,this._$.first_column)];
break;
case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54:
this.$ = {left: $$[$0-2], op: $$[$0-1], right: $$[$0]};
break;
case 55:
this.$ = {id: $$[$0], type: Type.NUMBER};
break;
case 56:
this.$ = {id: '-'+$$[$0], type: Type.NUMBER};
break;
case 57: case 58:
this.$ = {id: '(int)'+$$[$0], type: Type.NUMBER};
break;
case 59:
this.$ = {id: $$[$0], type: Type.NULL};
break;
case 60:
this.$ = {id: $$[$0], type: Type.ID};
break;
case 61:
this.$ = {id: '-'+$$[$0], type: Type.ID};
break;
}
},
table: [{3:1,4:2,7:[1,3],8:$V0,9:$V1},{1:[3]},{4:6,8:$V0,9:$V1},{1:[2,2]},o($V2,[2,3]),o($V2,[2,4]),{5:7,10:8,14:$V3},{6:10,10:11,13:$V4,14:$V3,19:$V5,23:$V6,25:12,26:13,27:14,28:15,29:16,30:17,31:18,32:19,33:20,35:$V7,36:$V8,40:$V9,42:$Va,43:27,46:$Vb,47:$Vc},o($Vd,[2,6]),{11:31,13:[1,32],19:[1,33],23:[1,34]},{7:[1,35],13:$V4,19:$V5,23:$V6,25:36,26:13,27:14,28:15,29:16,30:17,31:18,32:19,33:20,35:$V7,36:$V8,40:$V9,42:$Va,43:27,46:$Vb,47:$Vc},o($Vd,[2,5]),o($Ve,[2,17]),o($Ve,[2,18]),o($Ve,[2,19]),o($Ve,[2,20]),o($Ve,[2,21]),o($Ve,[2,22]),o($Ve,[2,23]),o($Ve,[2,24]),o($Ve,[2,25]),{16:[1,37],34:[1,38],37:[1,39]},{20:[1,40]},{20:[1,41]},{13:[1,42]},{37:[1,43]},{37:[1,44]},{13:[1,45]},{15:[1,46],21:[1,47]},{13:[2,39]},{13:[2,40]},{12:[1,49],15:[1,48]},o($Vf,[2,8],{16:[1,50]}),{20:[1,51]},{20:[1,52]},{1:[2,1]},o($Ve,[2,16]),{13:$Vg,17:53,18:54,19:[1,55],21:$Vh,23:[1,56],37:$Vi,55:$Vj,59:$Vk},o($Ve,[2,32]),{39:[1,62]},{13:$Vg,18:63,21:$Vh,37:$Vi,55:$Vj,59:$Vk},{13:$Vg,18:64,21:$Vh,37:$Vi,55:$Vj,59:$Vk},{15:[1,65]},{13:$Vg,18:67,21:$Vh,37:$Vi,38:66,55:$Vj,59:$Vk},{41:[1,68]},{37:[1,69]},o($Ve,[2,42]),{15:[1,70]},o($Vd,[2,9]),{13:[1,71]},{13:$Vg,17:72,18:73,21:$Vh,37:$Vi,55:$Vj,59:$Vk},{21:[1,74]},{21:[1,75]},{15:[1,76]},{15:[1,77],54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp},{20:[1,83]},{20:[1,84]},o($Vq,[2,55]),{13:[1,86],21:[1,85]},{42:[1,87]},o($Vq,[2,59]),o($Vq,[2,60]),{15:[1,88]},{22:[1,89]},{22:[1,90]},o($Ve,[2,33]),{39:[1,91]},{48:[1,92],49:[1,93],50:[1,94],51:[1,95],52:[1,96],53:[1,97]},{12:[1,98]},{39:[1,99]},o($Ve,[2,43]),o($Vf,[2,7]),{15:[1,100]},{15:[1,101],54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp},{22:[1,102]},{22:[1,103]},o($Ve,[2,26]),o($Ve,[2,27]),{13:$Vg,18:104,21:$Vh,37:$Vi,55:$Vj,59:$Vk},{13:$Vg,18:105,21:$Vh,37:$Vi,55:$Vj,59:$Vk},{13:$Vg,18:106,21:$Vh,37:$Vi,55:$Vj,59:$Vk},{13:$Vg,18:107,21:$Vh,37:$Vi,55:$Vj,59:$Vk},{13:$Vg,18:108,21:$Vh,37:$Vi,55:$Vj,59:$Vk},{13:$Vg,18:109,21:$Vh,37:$Vi,55:$Vj,59:$Vk},{13:$Vg,18:110,21:$Vh,37:$Vi,55:$Vj,59:$Vk},o($Vq,[2,56]),o($Vq,[2,61]),{39:[1,111]},o($Ve,[2,41]),{16:[1,112]},{16:[1,113]},{35:[1,114]},{13:$Vg,18:115,21:$Vh,37:$Vi,55:$Vj,59:$Vk},{13:$Vg,18:116,21:$Vh,37:$Vi,55:$Vj,59:$Vk},{13:$Vg,18:117,21:$Vh,37:$Vi,55:$Vj,59:$Vk},{13:$Vg,18:118,21:$Vh,37:$Vi,55:$Vj,59:$Vk},{13:$Vg,18:119,21:$Vh,37:$Vi,55:$Vj,59:$Vk},{13:$Vg,18:120,21:$Vh,37:$Vi,55:$Vj,59:$Vk},{13:$Vg,18:121,21:$Vh,37:[1,122],55:$Vj,59:$Vk},{15:[1,124],44:[1,123]},o($Vd,[2,10]),o($Vd,[2,11]),{15:[1,125]},{15:[1,126]},{15:[2,50]},{15:[2,51]},{15:[2,52]},{15:[2,53]},{15:[2,54]},{22:[1,127]},{22:[1,128]},{13:[1,129],21:[1,130]},{13:$Vg,18:131,21:$Vh,37:$Vi,55:$Vj,59:$Vk},{13:$Vg,18:132,21:$Vh,37:$Vi,55:$Vj,59:$Vk},{13:[1,133]},{39:[2,44]},{39:[2,45]},{39:[2,46]},{39:[2,47]},{39:[2,48]},{39:[2,49]},{39:[1,134]},{42:[1,135]},{6:137,13:$V4,19:$V5,23:$V6,24:136,25:12,26:13,27:14,28:15,29:16,30:17,31:18,32:19,33:20,35:$V7,36:$V8,40:$V9,42:$Va,43:27,45:[2,15],46:$Vb,47:$Vc},o($Ve,[2,38]),o($Vd,[2,12]),o($Vd,[2,13]),{15:[1,138]},{15:[1,139]},o($Vq,$Vr),o($Vq,$Vs),{15:[1,140]},{15:[1,141]},{15:[1,142]},{15:[1,143]},{39:[1,144]},{45:[1,145]},{13:$V4,19:$V5,23:$V6,25:36,26:13,27:14,28:15,29:16,30:17,31:18,32:19,33:20,35:$V7,36:$V8,40:$V9,42:$Va,43:27,45:[2,14],46:$Vb,47:$Vc},o($Ve,[2,28]),o($Ve,[2,29]),o($Ve,[2,30]),o($Ve,[2,31]),o($Ve,[2,34]),o($Ve,[2,35]),{13:[1,147],18:146,21:[1,148],37:$Vi,55:$Vj,59:$Vk},o($Ve,[2,37]),{39:[1,149]},{39:$Vr},{39:$Vs},{15:[1,150]},o($Ve,[2,36])],
defaultActions: {3:[2,2],29:[2,39],30:[2,40],35:[2,1],104:[2,50],105:[2,51],106:[2,52],107:[2,53],108:[2,54],115:[2,44],116:[2,45],117:[2,46],118:[2,47],119:[2,48],120:[2,49],147:[2,57],148:[2,58]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario simple línea
break;
case 1:// comentario multiple líneas
break;
case 2:return 'incremento';
break;
case 3:return 'decremento';
break;
case 4:return 54;
break;
case 5:return 55;   
break;
case 6:return 56;
break;
case 7:return 57;
break;
case 8:return 58;
break;
case 9:return 48;
break;
case 10:return 52;
break;
case 11:return 53;
break;
case 12:return 51;
break;
case 13:return 50;
break;
case 14:return 49;
break;
case 15:return 20;     
break;
case 16:return 22;
break;
case 17:return 37;     
break;
case 18:return 39;
break;
case 19:return 44;     
break;
case 20:return 45;
break;
case 21:return 12;
break;
case 22:return 'punto';
break;
case 23:return 16;
break;
case 24:return 15;
break;
case 25:return 34;
break;
case 26:return 14;
break;
case 27:return 36;
break;
case 28:return 40;
break;
case 29:return 19;
break;
case 30:return 23;
break;
case 31:return 35;
break;
case 32:return 59;
break;
case 33:return 46;
break;
case 34:return 42;
break;
case 35:return 47;
break;
case 36:return 8;
break;
case 37:return 9;
break;
case 38:
break;
case 39:
break;
case 40:return 21;
break;
case 41:return 13;
break;
case 42:return 41;
break;
case 43:return 7;
break;
case 44:/*count.putError(Type.LEXICO,'Este es un error léxico: ' + yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column);*/
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\.)/i,/^(?:=)/i,/^(?:;)/i,/^(?::)/i,/^(?:double\b)/i,/^(?:if\b)/i,/^(?:printf\b)/i,/^(?:stack\b)/i,/^(?:heap\b)/i,/^(?:goto\b)/i,/^(?:null\b)/i,/^(?:void\b)/i,/^(?:int\b)/i,/^(?:return\b)/i,/^(?:#include <stdio\.h>)/i,/^(?:#include <math\.h>)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[0-9]+\.[0-9]+\b|[0-9]+\b)/i,/^(?:([a-zA-Z])[a-z0-9A-Z"_""ñ""Ñ"]*)/i,/^(?:["][%][c|i|d]["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = c3dBlock;
exports.Parser = c3dBlock.Parser;
exports.parse = function () { return c3dBlock.parse.apply(c3dBlock, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
