/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import InstructionTab from './optimize/InstructionTab';
import Instruction from './optimize/Instruction';
import Type from './optimize/Type';
export var c3dBlock = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,19],$V2=[1,20],$V3=[1,21],$V4=[1,28],$V5=[1,22],$V6=[1,23],$V7=[1,24],$V8=[1,27],$V9=[1,26],$Va=[12,13,18,22,34,37,38,40,45,46],$Vb=[7,12,18,22,34,37,38,40,44,45,46],$Vc=[11,14],$Vd=[1,59],$Ve=[1,56],$Vf=[1,57],$Vg=[1,55],$Vh=[1,58],$Vi=[1,78],$Vj=[1,79],$Vk=[1,80],$Vl=[1,81],$Vm=[1,82],$Vn=[14,21,35,47,48,49,50,51,52,53,54,55,56,57];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"IMPORT":4,"DECLA":5,"INSTRUCTIONS":6,"EOF":7,"resinclude1":8,"DECLARATION":9,"LISTID":10,"coma":11,"id":12,"resvar":13,"puntocoma":14,"igual":15,"EXP":16,"EXP2":17,"resstack":18,"llavea":19,"entero":20,"llavec":21,"resheap":22,"BLOCK":23,"INSTRUCTION":24,"ASSIGNMENT":25,"LABEL":26,"GOTO":27,"IF":28,"PRINT":29,"PROC":30,"CALL":31,"RETURNTT":32,"parenta":33,"resint":34,"parentc":35,"dospuntos":36,"resgoto":37,"resif":38,"EXPRT":39,"resprint":40,"cprint":41,"RETT":42,"corchetea":43,"corchetec":44,"resvoid":45,"resreturn":46,"diferente":47,"identico":48,"mayor":49,"menor":50,"mayorigual":51,"menorigual":52,"suma":53,"resta":54,"multiplicacion":55,"slash":56,"modulo":57,"decimal":58,"resnull":59,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",8:"resinclude1",11:"coma",12:"id",13:"resvar",14:"puntocoma",15:"igual",18:"resstack",19:"llavea",20:"entero",21:"llavec",22:"resheap",33:"parenta",34:"resint",35:"parentc",36:"dospuntos",37:"resgoto",38:"resif",40:"resprint",41:"cprint",43:"corchetea",44:"corchetec",45:"resvoid",46:"resreturn",47:"diferente",48:"identico",49:"mayor",50:"menor",51:"mayorigual",52:"menorigual",53:"suma",54:"resta",55:"multiplicacion",56:"slash",57:"modulo",58:"decimal",59:"resnull"},
productions_: [0,[3,4],[3,1],[4,1],[5,2],[5,1],[10,3],[10,1],[9,3],[9,5],[9,5],[9,6],[9,6],[23,1],[23,0],[6,2],[6,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[25,4],[25,4],[25,10],[25,7],[25,10],[25,7],[25,10],[25,7],[25,10],[25,7],[26,2],[27,3],[28,7],[29,7],[29,10],[30,7],[42,1],[42,1],[31,4],[32,2],[32,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[16,3],[16,3],[16,3],[16,3],[16,3],[17,1],[17,1],[17,2],[17,2],[17,1],[17,1],[17,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
var tab = new InstructionTab(); this.$ = $$[$0-3]; this.$ = this.$.concat($$[$0-2]); tab.instructions = this.$; return tab.operateBlock();
break;
case 2:
var tab = new InstructionTab(); tab.instructions = []; return tab.operateBlock();
break;
case 4: case 15:
this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
break;
case 5: case 13: case 17: case 18: case 19: case 20: case 21: case 22: case 23:
this.$ = $$[$0];
break;
case 6:
this.$ = $$[$0-2]; this.$ += ','+$$[$0];
break;
case 7:
this.$ = ''+$$[$0];
break;
case 8:
this.$ = [new Instruction($$[$0-1],null,null,null,Type.DECLARATION,1,this._$.first_line,this._$.first_column)];
break;
case 9:
this.$ = [new Instruction($$[$0-3],$$[$0-1].op,$$[$0-1].left,$$[$0-1].right,Type.DECLARATION,2,this._$.first_line,this._$.first_column)];
break;
case 10:
this.$ = [new Instruction($$[$0-3],null,$$[$0-1],null,Type.DECLARATION,3,this._$.first_line,this._$.first_column)];
break;
case 11:
this.$ = [new Instruction(Type.STACK,null,'[',']',Type.DECLARATION,4,this._$.first_line,this._$.first_column)];
break;
case 12:
this.$ = [new Instruction(Type.HEAP,null,'[',']',Type.DECLARATION,5,this._$.first_line,this._$.first_column)];
break;
case 14:
this.$ = [];
break;
case 16:
this.$ = []; this.$ = this.$.concat($$[$0])
break;
case 25:
this.$ = [new Instruction($$[$0-3],$$[$0-1].op,$$[$0-1].left,$$[$0-1].right,Type.ASSIGNMENT,1,this._$.first_line,this._$.first_column)];
break;
case 26:
this.$ = [new Instruction($$[$0-3],null,$$[$0-1],null,Type.ASSIGNMENT,2,this._$.first_line,this._$.first_column)];
break;
case 27:
this.$ = [new Instruction($$[$0-9],null,Type.STACK,$$[$0-2],Type.ASSIGNMENT,3,this._$.first_line,this._$.first_column)];
break;
case 28:
this.$ = [new Instruction($$[$0-6],null,Type.STACK,$$[$0-2],Type.ASSIGNMENT,3,this._$.first_line,this._$.first_column)];
break;
case 29:
this.$ = [new Instruction($$[$0-9],null,Type.HEAP,$$[$0-2],Type.ASSIGNMENT,4,this._$.first_line,this._$.first_column)];
break;
case 30:
this.$ = [new Instruction($$[$0-6],null,Type.HEAP,$$[$0-2],Type.ASSIGNMENT,4,this._$.first_line,this._$.first_column)];
break;
case 31: case 32:
this.$ = [new Instruction(Type.STACK,null,$$[$0-4],$$[$0-1],Type.ASSIGNMENT,5,this._$.first_line,this._$.first_column)];
break;
case 33: case 34:
this.$ = [new Instruction(Type.HEAP,null,$$[$0-4],$$[$0-1],Type.ASSIGNMENT,6,this._$.first_line,this._$.first_column)];
break;
case 35:
this.$ = [new Instruction($$[$0-1],null,null,null,Type.LABEL,0,this._$.first_line,this._$.first_column)];
break;
case 36:
this.$ = [new Instruction($$[$0-1],null,null,null,Type.GOTO,0,this._$.first_line,this._$.first_column)];
break;
case 37:
this.$ = [new Instruction($$[$0-1],$$[$0-4].op,$$[$0-4].left,$$[$0-4].right,Type.IF,0,this._$.first_line,this._$.first_column)];
break;
case 38:
this.$ = [new Instruction(null,null,$$[$0-4],$$[$0-2],Type.PRINT,0,this._$.first_line,this._$.first_column)];
break;
case 39:
this.$ = [new Instruction(null,null,$$[$0-7],$$[$0-2],Type.PRINT,0,this._$.first_line,this._$.first_column)];
break;
case 40:
this.$ = [new Instruction($$[$0-5],null,null,null,Type.PROC,0,this._$.first_line,this._$.first_column)]; this.$ = this.$.concat($$[$0-1]); this.$.push(new Instruction('end',null,null,null,Type.END,this._$.first_line,this._$.first_column))
break;
case 43:
this.$ = [new Instruction($$[$0-3],null,null,null,Type.CALL,0,this._$.first_line,this._$.first_column)];
break;
case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56:
this.$ = {left: $$[$0-2], op: $$[$0-1], right: $$[$0]};
break;
case 57: case 58:
this.$ = {id: $$[$0], type: Type.NUMBER};
break;
case 59: case 60:
this.$ = {id: '-'+$$[$0], type: Type.NUMBER};
break;
case 61:
this.$ = {id: $$[$0], type: Type.NULL};
break;
case 62:
this.$ = {id: $$[$0], type: Type.ID};
break;
case 63:
this.$ = {id: '-'+$$[$0], type: Type.ID};
break;
}
},
table: [{3:1,4:2,7:[1,3],8:[1,4]},{1:[3]},{5:5,9:6,13:$V0},{1:[2,2]},{13:[2,3]},{6:8,9:9,12:$V1,13:$V0,18:$V2,22:$V3,24:10,25:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,34:$V4,37:$V5,38:$V6,40:$V7,42:25,45:$V8,46:$V9},o($Va,[2,5]),{10:29,12:[1,30],18:[1,31],22:[1,32]},{7:[1,33],12:$V1,18:$V2,22:$V3,24:34,25:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,34:$V4,37:$V5,38:$V6,40:$V7,42:25,45:$V8,46:$V9},o($Va,[2,4]),o($Vb,[2,16]),o($Vb,[2,17]),o($Vb,[2,18]),o($Vb,[2,19]),o($Vb,[2,20]),o($Vb,[2,21]),o($Vb,[2,22]),o($Vb,[2,23]),o($Vb,[2,24]),{15:[1,35],33:[1,37],36:[1,36]},{19:[1,38]},{19:[1,39]},{12:[1,40]},{33:[1,41]},{33:[1,42]},{12:[1,43]},{14:[1,44],20:[1,45]},{12:[2,41]},{12:[2,42]},{11:[1,47],14:[1,46]},o($Vc,[2,7],{15:[1,48]}),{19:[1,49]},{19:[1,50]},{1:[2,1]},o($Vb,[2,15]),{12:$Vd,16:51,17:52,18:[1,53],20:$Ve,22:[1,54],54:$Vf,58:$Vg,59:$Vh},o($Vb,[2,35]),{35:[1,60]},{12:$Vd,17:62,20:$Ve,33:[1,61],54:$Vf,58:$Vg,59:$Vh},{12:$Vd,17:64,20:$Ve,33:[1,63],54:$Vf,58:$Vg,59:$Vh},{14:[1,65]},{12:$Vd,17:67,20:$Ve,39:66,54:$Vf,58:$Vg,59:$Vh},{41:[1,68]},{33:[1,69]},o($Vb,[2,44]),{14:[1,70]},o($Va,[2,8]),{12:[1,71]},{12:$Vd,16:72,17:73,20:$Ve,54:$Vf,58:$Vg,59:$Vh},{20:[1,74]},{20:[1,75]},{14:[1,76]},{14:[1,77],53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{19:[1,83]},{19:[1,84]},o($Vn,[2,57]),o($Vn,[2,58]),{12:[1,87],20:[1,86],58:[1,85]},o($Vn,[2,61]),o($Vn,[2,62]),{14:[1,88]},{34:[1,89]},{21:[1,90]},{34:[1,91]},{21:[1,92]},o($Vb,[2,36]),{35:[1,93]},{47:[1,94],48:[1,95],49:[1,96],50:[1,97],51:[1,98],52:[1,99]},{11:[1,100]},{35:[1,101]},o($Vb,[2,45]),o($Vc,[2,6]),{14:[1,102]},{14:[1,103],53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{21:[1,104]},{21:[1,105]},o($Vb,[2,25]),o($Vb,[2,26]),{12:$Vd,17:106,20:$Ve,54:$Vf,58:$Vg,59:$Vh},{12:$Vd,17:107,20:$Ve,54:$Vf,58:$Vg,59:$Vh},{12:$Vd,17:108,20:$Ve,54:$Vf,58:$Vg,59:$Vh},{12:$Vd,17:109,20:$Ve,54:$Vf,58:$Vg,59:$Vh},{12:$Vd,17:110,20:$Ve,54:$Vf,58:$Vg,59:$Vh},{12:$Vd,17:112,20:$Ve,33:[1,111],54:$Vf,58:$Vg,59:$Vh},{12:$Vd,17:114,20:$Ve,33:[1,113],54:$Vf,58:$Vg,59:$Vh},o($Vn,[2,59]),o($Vn,[2,60]),o($Vn,[2,63]),o($Vb,[2,43]),{35:[1,115]},{15:[1,116]},{35:[1,117]},{15:[1,118]},{37:[1,119]},{12:$Vd,17:120,20:$Ve,54:$Vf,58:$Vg,59:$Vh},{12:$Vd,17:121,20:$Ve,54:$Vf,58:$Vg,59:$Vh},{12:$Vd,17:122,20:$Ve,54:$Vf,58:$Vg,59:$Vh},{12:$Vd,17:123,20:$Ve,54:$Vf,58:$Vg,59:$Vh},{12:$Vd,17:124,20:$Ve,54:$Vf,58:$Vg,59:$Vh},{12:$Vd,17:125,20:$Ve,54:$Vf,58:$Vg,59:$Vh},{12:$Vd,17:126,20:$Ve,33:[1,127],54:$Vf,58:$Vg,59:$Vh},{43:[1,128]},o($Va,[2,9]),o($Va,[2,10]),{14:[1,129]},{14:[1,130]},{14:[2,52]},{14:[2,53]},{14:[2,54]},{14:[2,55]},{14:[2,56]},{34:[1,131]},{21:[1,132]},{34:[1,133]},{21:[1,134]},{12:$Vd,17:135,20:$Ve,54:$Vf,58:$Vg,59:$Vh},{12:$Vd,17:136,20:$Ve,54:$Vf,58:$Vg,59:$Vh},{12:$Vd,17:137,20:$Ve,54:$Vf,58:$Vg,59:$Vh},{12:$Vd,17:138,20:$Ve,54:$Vf,58:$Vg,59:$Vh},{12:[1,139]},{35:[2,46]},{35:[2,47]},{35:[2,48]},{35:[2,49]},{35:[2,50]},{35:[2,51]},{35:[1,140]},{34:[1,141]},{6:143,12:$V1,18:$V2,22:$V3,23:142,24:10,25:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,34:$V4,37:$V5,38:$V6,40:$V7,42:25,44:[2,14],45:$V8,46:$V9},o($Va,[2,11]),o($Va,[2,12]),{35:[1,144]},{14:[1,145]},{35:[1,146]},{14:[1,147]},{21:[1,148]},{14:[1,149]},{21:[1,150]},{14:[1,151]},{14:[1,152]},{14:[1,153]},{35:[1,154]},{44:[1,155]},{12:$V1,18:$V2,22:$V3,24:34,25:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,34:$V4,37:$V5,38:$V6,40:$V7,42:25,44:[2,13],45:$V8,46:$V9},{12:$Vd,17:156,20:$Ve,54:$Vf,58:$Vg,59:$Vh},o($Vb,[2,28]),{12:$Vd,17:157,20:$Ve,54:$Vf,58:$Vg,59:$Vh},o($Vb,[2,30]),{15:[1,158]},o($Vb,[2,32]),{15:[1,159]},o($Vb,[2,34]),o($Vb,[2,37]),o($Vb,[2,38]),{12:$Vd,17:160,20:$Ve,54:$Vf,58:$Vg,59:$Vh},o($Vb,[2,40]),{21:[1,161]},{21:[1,162]},{12:$Vd,17:163,20:$Ve,54:$Vf,58:$Vg,59:$Vh},{12:$Vd,17:164,20:$Ve,54:$Vf,58:$Vg,59:$Vh},{35:[1,165]},{14:[1,166]},{14:[1,167]},{14:[1,168]},{14:[1,169]},{14:[1,170]},o($Vb,[2,27]),o($Vb,[2,29]),o($Vb,[2,31]),o($Vb,[2,33]),o($Vb,[2,39])],
defaultActions: {3:[2,2],4:[2,3],27:[2,41],28:[2,42],33:[2,1],106:[2,52],107:[2,53],108:[2,54],109:[2,55],110:[2,56],120:[2,46],121:[2,47],122:[2,48],123:[2,49],124:[2,50],125:[2,51]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario simple línea
break;
case 1:// comentario multiple líneas
break;
case 2:return 'incremento';
break;
case 3:return 'decremento';
break;
case 4:return 53;
break;
case 5:return 54;   
break;
case 6:return 55;
break;
case 7:return 56;
break;
case 8:return 57;
break;
case 9:return 47;
break;
case 10:return 51;
break;
case 11:return 52;
break;
case 12:return 50;
break;
case 13:return 49;
break;
case 14:return 48;
break;
case 15:return 19;     
break;
case 16:return 21;
break;
case 17:return 33;     
break;
case 18:return 35;
break;
case 19:return 43;     
break;
case 20:return 44;
break;
case 21:return 11;
break;
case 22:return 'punto';
break;
case 23:return 15;
break;
case 24:return 14;
break;
case 25:return 36;
break;
case 26:return 13;
break;
case 27:return 38;
break;
case 28:return 40;
break;
case 29:return 18;
break;
case 30:return 22;
break;
case 31:return 37;
break;
case 32:return 59;
break;
case 33:return 45;
break;
case 34:return 34;
break;
case 35:return 46;
break;
case 36:return 8;
break;
case 37:
break;
case 38:
break;
case 39:return 58;
break;
case 40:return 20;
break;
case 41:return 12;
break;
case 42:return 41;
break;
case 43:return 7;
break;
case 44:/*count.putError(Type.LEXICO,'Este es un error léxico: ' + yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column);*/
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:<>)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\.)/i,/^(?:=)/i,/^(?:;)/i,/^(?::)/i,/^(?:double\b)/i,/^(?:if\b)/i,/^(?:printf\b)/i,/^(?:stack\b)/i,/^(?:heap\b)/i,/^(?:goto\b)/i,/^(?:null\b)/i,/^(?:void\b)/i,/^(?:int\b)/i,/^(?:return\b)/i,/^(?:#include <stdio\.h>)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-z0-9A-Z"_""ñ""Ñ"]*)/i,/^(?:["][%][c|i|d]["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = c3dBlock;
exports.Parser = c3dBlock.Parser;
exports.parse = function () { return c3dBlock.parse.apply(c3dBlock, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
