/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import Node from './clases/Node';
export var ast = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,23],$V2=[1,30],$V3=[1,18],$V4=[1,32],$V5=[1,33],$V6=[1,35],$V7=[1,25],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[1,31],$Vd=[2,5,7,8,29,58,59,93,94,99,100,101,108,145],$Ve=[1,50],$Vf=[1,51],$Vg=[1,52],$Vh=[1,53],$Vi=[1,54],$Vj=[1,55],$Vk=[2,5,7,8,12,29,58,59,70,71,72,93,94,97,98,99,100,101,108,145],$Vl=[1,62],$Vm=[1,65],$Vn=[9,77,78,79,80,81,82],$Vo=[2,179],$Vp=[1,68],$Vq=[1,74],$Vr=[1,75],$Vs=[1,76],$Vt=[1,73],$Vu=[2,5,7,8,12,29,58,59,70,71,72,91,93,94,97,98,99,100,101,108,145],$Vv=[13,104,105],$Vw=[2,57],$Vx=[1,82],$Vy=[13,14,104,105],$Vz=[2,64],$VA=[1,85],$VB=[1,111],$VC=[1,91],$VD=[1,101],$VE=[1,107],$VF=[1,109],$VG=[1,100],$VH=[1,97],$VI=[1,99],$VJ=[1,102],$VK=[1,103],$VL=[1,104],$VM=[1,106],$VN=[1,110],$VO=[1,136],$VP=[1,132],$VQ=[1,133],$VR=[1,134],$VS=[1,141],$VT=[9,12,13,14,15,32,49,50,53,77,78,79,80,81,82,104,105,106,107,110,111,113,115,116,117,119,120],$VU=[13,32],$VV=[1,154],$VW=[1,155],$VX=[1,156],$VY=[1,157],$VZ=[1,158],$V_=[12,13,14,15,32,49,50,53,77,78,79,80,81,82,104,105,110,111,113,115,116,117,119,120],$V$=[1,165],$V01=[1,174],$V11=[1,171],$V21=[1,172],$V31=[1,173],$V41=[1,175],$V51=[1,176],$V61=[1,169],$V71=[1,180],$V81=[1,181],$V91=[12,13,14,15,32,53,104,105,110,111],$Va1=[12,13,14,15,32,53,104,105,110,111,113],$Vb1=[12,13,14,15,32,53,104,105,110,111,113,115,116,117],$Vc1=[12,13,14,15,32,49,50,53,104,105,110,111,113,115,116,117,119,120],$Vd1=[12,13,14,15,32,49,50,53,77,78,104,105,110,111,113,115,116,117,119,120],$Ve1=[1,197],$Vf1=[1,201],$Vg1=[1,209],$Vh1=[12,97,98],$Vi1=[2,8,12,29,58,59,70,71,72,93,94,97,98,99,100,101,108,145],$Vj1=[32,53],$Vk1=[1,234],$Vl1=[1,235],$Vm1=[2,33],$Vn1=[1,244],$Vo1=[1,247],$Vp1=[2,49],$Vq1=[9,10,12,13,14,32,50,104,105],$Vr1=[1,254],$Vs1=[9,10,12,13,14,32,50,52,104,105],$Vt1=[12,13,14,104,105],$Vu1=[9,12,13,14,15,32,49,50,53,77,78,79,80,81,82,104,105,106,107,110,111,113,115,116,117,119,120,132],$Vv1=[1,295],$Vw1=[12,13,14,15,32,49,50,53,77,78,80,81,82,104,105,110,111,113,115,116,117,119,120],$Vx1=[1,330],$Vy1=[14,32],$Vz1=[1,338],$VA1=[1,337],$VB1=[12,14],$VC1=[2,5,7,8,12,29,58,59,70,71,72,93,94,99,100,101,108,145],$VD1=[2,8,12,29,58,59,70,71,72,93,94,99,100,101,108,145];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"INSTRUCTIONSG":4,"EOF":5,"DEFTYPES":6,"restype":7,"id":8,"igual":9,"corchetea":10,"ATTRIB":11,"corchetec":12,"puntocoma":13,"coma":14,"dospuntos":15,"TYPES":16,"INSTRUCTIONG":17,"FUNCTIONG":18,"DECLARATION":19,"ASSIGMENTWITHTYPE":20,"IF":21,"SWITCH":22,"WHILE":23,"DOWHILE":24,"FOR":25,"PRINT":26,"CALLF":27,"GRAFICAR":28,"resfunction":29,"parenta":30,"LISTAPARAMETROS":31,"parentc":32,"RETURNT":33,"BLOCKF":34,"FUNCTIONL":35,"BLOCK2F":36,"INSTRUCTIONSF":37,"INSTRUCTIONF":38,"INSTRUCTION":39,"TYPESF":40,"resvoid":41,"TYPE":42,"resinteger":43,"resboolean":44,"resstring":45,"resnumber":46,"resundefined":47,"resarray":48,"menor":49,"mayor":50,"MULTIDIMENSION":51,"llavea":52,"llavec":53,"LSPBETHA":54,"LISTAPARAMETROSPRIM":55,"LSALPHA":56,"TYPEVAR":57,"resconst":58,"reslet":59,"LISTID":60,"LISPBETHA":61,"LISTIDPRIM":62,"LISALPHA":63,"ASSVALUE":64,"EXPRT":65,"DECASSTYPE":66,"BLOCK":67,"BLOCK2":68,"INSTRUCTIONS":69,"resbreak":70,"rescontinue":71,"resreturn":72,"ASSIGNMENT":73,"IDVALOR":74,"OPERADOR":75,"DECINC":76,"suma":77,"resta":78,"potencia":79,"multiplicacion":80,"slash":81,"modulo":82,"CONTENTASWT":83,"IDVALORASS":84,"ASSIGNMENTTYPE":85,"VALUETYPE":86,"ASSIGNMENTTYPEPRIM":87,"PARAMETROUNITARIO":88,"CELSE":89,"ELSE":90,"reselse":91,"IFF":92,"resif":93,"resswitch":94,"CASES":95,"DEFAULT":96,"rescase":97,"resdefault":98,"reswhile":99,"resdo":100,"resfor":101,"DEC":102,"FINON":103,"resof":104,"resin":105,"incremento":106,"decremento":107,"resprint":108,"DATAPRINT":109,"or":110,"quest":111,"EXPRT2":112,"and":113,"EXPR":114,"diferente":115,"identico":116,"referencias":117,"EXPR1":118,"mayorigual":119,"menorigual":120,"EXP":121,"EXP1":122,"EXP2":123,"not":124,"EXP3":125,"number":126,"cadena":127,"restrue":128,"resfalse":129,"resnull":130,"resnew":131,"punto":132,"OPERADORC":133,"IDVALOR2":134,"ARREGLO":135,"reslength":136,"resCharAt":137,"resToLowerCase":138,"resToUpperCase":139,"resConcat":140,"PARAMETERS":141,"PARAMETERSPRIM":142,"IDVALOR2ASS":143,"respush":144,"resgraficar_ts":145,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"restype",8:"id",9:"igual",10:"corchetea",12:"corchetec",13:"puntocoma",14:"coma",15:"dospuntos",29:"resfunction",30:"parenta",32:"parentc",41:"resvoid",43:"resinteger",44:"resboolean",45:"resstring",46:"resnumber",47:"resundefined",48:"resarray",49:"menor",50:"mayor",52:"llavea",53:"llavec",58:"resconst",59:"reslet",70:"resbreak",71:"rescontinue",72:"resreturn",77:"suma",78:"resta",79:"potencia",80:"multiplicacion",81:"slash",82:"modulo",91:"reselse",93:"resif",94:"resswitch",97:"rescase",98:"resdefault",99:"reswhile",100:"resdo",101:"resfor",104:"resof",105:"resin",106:"incremento",107:"decremento",108:"resprint",110:"or",111:"quest",113:"and",115:"diferente",116:"identico",117:"referencias",119:"mayorigual",120:"menorigual",124:"not",126:"number",127:"cadena",128:"restrue",129:"resfalse",130:"resnull",131:"resnew",132:"punto",136:"reslength",137:"resCharAt",138:"resToLowerCase",139:"resToUpperCase",140:"resConcat",144:"respush",145:"resgraficar_ts"},
productions_: [0,[3,2],[3,1],[6,7],[11,5],[11,3],[4,2],[4,1],[17,1],[17,2],[17,1],[17,1],[17,1],[17,1],[17,1],[17,2],[17,1],[17,2],[17,2],[17,2],[17,1],[18,7],[18,6],[35,7],[35,6],[34,2],[36,2],[36,1],[37,2],[37,1],[38,1],[38,1],[33,2],[33,0],[40,1],[40,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[16,4],[16,2],[16,1],[51,3],[51,2],[31,2],[55,2],[55,0],[54,3],[56,4],[57,1],[57,1],[19,2],[60,2],[62,2],[62,0],[61,2],[61,4],[63,3],[63,5],[64,2],[64,2],[64,0],[67,2],[68,2],[68,1],[69,2],[69,1],[39,2],[39,1],[39,1],[39,1],[39,1],[39,2],[39,1],[39,2],[39,2],[39,2],[39,2],[39,3],[39,2],[39,2],[39,1],[73,4],[73,2],[73,3],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[20,3],[20,2],[20,2],[83,2],[66,2],[85,4],[87,5],[87,1],[86,1],[86,1],[88,3],[21,2],[89,3],[89,1],[90,2],[90,0],[92,3],[22,6],[95,5],[95,4],[95,4],[95,3],[96,3],[96,2],[96,0],[23,3],[24,4],[25,9],[25,7],[102,1],[102,1],[102,0],[103,1],[103,1],[76,1],[76,1],[26,4],[109,3],[109,1],[65,3],[65,5],[65,1],[112,3],[112,1],[114,3],[114,3],[114,3],[114,1],[118,3],[118,3],[118,3],[118,3],[118,1],[121,3],[121,3],[121,1],[122,3],[122,3],[122,3],[122,3],[122,1],[123,2],[123,1],[125,1],[125,2],[125,2],[125,3],[125,1],[125,1],[125,1],[125,1],[125,1],[125,1],[125,1],[125,2],[125,2],[125,3],[125,5],[125,3],[74,2],[74,3],[135,4],[135,3],[134,2],[134,2],[134,0],[133,1],[133,4],[133,3],[133,3],[133,4],[27,3],[141,2],[141,1],[142,3],[142,1],[84,2],[84,3],[143,2],[143,5],[28,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 root = new Node(id++,"INSTRUCTIONSG"); root.children.push($$[$0-1]); let arbol = createAST(root); return arbol;
break;
case 3:
this.$ = new Node(id++,"DEFTYPES"); this.$.children.push(new Node(id++,$$[$0-6])); this.$.children.push(new Node(id++,$$[$0-5])); this.$.children.push(new Node(id++,$$[$0-4])); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,$$[$0])); 
break;
case 4:
this.$ = new Node(id++,"ATTRIB");this.$.children.push($$[$0-4]); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 5:
this.$ = new Node(id++,"ATTRIB"); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]); 
break;
case 6:
this.$ = new Node(id++,"INSTRUCTIONSG");this.$.children.push($$[$0-1]); this.$.children.push($$[$0]);
break;
case 7:
this.$ = new Node(id++,"INSTRUCTIONSG");this.$.children.push($$[$0]);
break;
case 8: case 10: case 11: case 12: case 13: case 14: case 16:
this.$ = new Node(id++,"INSTRUCTIONG");this.$.children.push($$[$0]);
break;
case 9: case 15: case 17: case 18:
this.$ = new Node(id++,"INSTRUCTIONG");this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,$$[$0]));
break;
case 19: case 70: case 75: case 77: case 78: case 83:
this.$ = new Node(id++,"INSTRUCTION");this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,$$[$0]));
break;
case 20: case 84:
 /*this is error*/ console.log($$[$0]); 
break;
case 21: case 23:
this.$ = new Node(id++,"IDVALOR"); this.$.children.push(new Node(id++,$$[$0-6])); this.$.children.push(new Node(id++,$$[$0-5])); this.$.children.push(new Node(id++,$$[$0-4])); this.$.children.push($$[$0-3]); this.$.children.push(new Node(id++,$$[$0-2])); if(check_to_add($$[$0-1]) === true) {this.$.children.push($$[$0-1])}; this.$.children.push($$[$0]);
break;
case 22: case 24:
this.$ = new Node(id++,"IDVALOR"); this.$.children.push(new Node(id++,$$[$0-5])); this.$.children.push(new Node(id++,$$[$0-4])); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push(new Node(id++,$$[$0-2]));  if(check_to_add($$[$0-1]) === true) {this.$.children.push($$[$0-1]);} this.$.children.push($$[$0]);
break;
case 25:
this.$ = new Node(id++,"BLOCKF");this.$.children.push(new Node(id++,$$[$0-1]));this.$.children.push($$[$0]);
break;
case 26:
this.$ = new Node(id++,"BLOCK2F");this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,$$[$0]));
break;
case 27:
this.$ = new Node(id++,"BLOCK2F"); this.$.children.push(new Node(id++,$$[$0])); 
break;
case 28:
this.$ = new Node(id++,"INSTRUCTIONF");this.$.children.push($$[$0-1]);this.$.children.push($$[$0]);
break;
case 29: case 30: case 31:
this.$ = new Node(id++,"INSTRUCTIONF");this.$.children.push($$[$0]);
break;
case 32:
this.$ = new Node(id++,"RETURNT");this.$.children.push(new Node(id++,$$[$0-1]));this.$.children.push($$[$0]);
break;
case 33:
this.$ = new Node(id++,"RETURNT"); this.$.children.push(new Node(id++,"epsilon"));
break;
case 34:
this.$ = new Node(id++,"TYPESF");this.$.children.push($$[$0]);
break;
case 35:
this.$ = new Node(id++,"TYPESF"); this.$.children.push(new Node(id++,$$[$0])); 
break;
case 36: case 37: case 38: case 39: case 40: case 41:
this.$ = new Node(id++,"TYPE"); this.$.children.push(new Node(id++,$$[$0])); 
break;
case 42:
this.$ = new Node(id++,"TYPES"); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,$$[$0]));
break;
case 43:
this.$ = new Node(id++,"TYPES");this.$.children.push($$[$0-1]); this.$.children.push($$[$0]);
break;
case 44:
this.$ = new Node(id++,"TYPES");this.$.children.push($$[$0]);
break;
case 45:
this.$ = new Node(id++,"MULTIDIMENSION"); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]); 
break;
case 46:
this.$ = new Node(id++,"MULTIDIMENSION"); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push(new Node(id++,$$[$0]));
break;
case 47:
 this.$ = new Node(id++,"LISTAPARAMETROS"); this.$.children.push($$[$0-1]);this.$.children.push($$[$0]); 
break;
case 48:
 this.$ = new Node(id++,"LISTAPARAMETROSPRIM"); this.$.children.push($$[$0-1]);this.$.children.push($$[$0]); 
break;
case 49: case 57:
 this.$ = new Node(id++,"epsilon"); 
break;
case 50:
 this.$ = new Node(id++,"LSPBETHA"); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]); 
break;
case 51:
 this.$ = new Node(id++,"LSALPHA");  this.$.children.push(new Node(id++,$$[$0-3]));  this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]); 
break;
case 52: case 53:
this.$ = new Node(id++,"TYPEVAR"); this.$.children.push(new Node(id++,$$[$0])); 
break;
case 54:
this.$ = new Node(id++,"DECLARATION"); this.$.children.push($$[$0-1]); this.$.children.push($$[$0]);
break;
case 55:
 this.$ = new Node(id++,"LISTID"); this.$.children.push($$[$0-1]);this.$.children.push($$[$0]); 
break;
case 56:
 this.$ = new Node(id++,"LISTIDPRIM"); this.$.children.push($$[$0-1]);this.$.children.push($$[$0]); 
break;
case 58:
this.$ = new Node(id++,"LISPBETHA");this.$.children.push(new Node(id++,$$[$0-1]));if(check_to_add($$[$0]) === true){this.$.children.push($$[$0]);}
break;
case 59:
this.$ = new Node(id++,"LISPBETHA"); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push($$[$0-1]); if(check_to_add($$[$0]) === true){this.$.children.push($$[$0]);}
break;
case 60:
this.$ = new Node(id++,"LISALPHA"); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push(new Node(id++,$$[$0-1])); if(check_to_add($$[$0]) === true){this.$.children.push($$[$0]);}
break;
case 61:
this.$ = new Node(id++,"LISALPHA"); this.$.children.push(new Node(id++,$$[$0-4])); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push($$[$0-1]); if(check_to_add($$[$0]) === true){this.$.children.push($$[$0]);}
break;
case 62:
this.$ = new Node(id++,"ASSVALUE");this.$.children.push(new Node(id++,$$[$0-1]));this.$.children.push($$[$0]);
break;
case 63: case 97:
this.$ = new Node(id++,"CONTENTASWT"); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 64:
this.$ = new Node(id++,"ASSVALUE"); this.$.children.push(new Node(id++,"epsilon"));
break;
case 65:
this.$ = new Node(id++,"BLOCK");this.$.children.push(new Node(id++,'{'));this.$.children.push($$[$0]);
break;
case 66:
this.$ = new Node(id++,"BLOCK2");this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,$$[$0]));
break;
case 67:
this.$ = new Node(id++,"BLOCK2"); this.$.children.push(new Node(id++,$$[$0])); 
break;
case 68:
this.$ = new Node(id++,"INSTRUCTION");this.$.children.push($$[$0-1]); this.$.children.push($$[$0]);
break;
case 69: case 71: case 72: case 73: case 74: case 76:
this.$ = new Node(id++,"INSTRUCTION");this.$.children.push($$[$0]);
break;
case 79: case 80: case 82:
this.$ = new Node(id++,"INSTRUCTION"); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push(new Node(id++,$$[$0]));
break;
case 81:
this.$ = new Node(id++,"INSTRUCTION"); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,$$[$0]));
break;
case 85:
this.$ = new Node(id++,"ASSIGNMENT"); this.$.children.push($$[$0-3]); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 86:
this.$ = new Node(id++,"ASSIGNMENT"); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 87:
 this.$ = new Node(id++,"ASSIGNMENT"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 88: case 89: case 90: case 91: case 92: case 93:
this.$ = new Node(id++,"OPERADOR"); this.$.children.push(new Node(id++,$$[$0])); 
break;
case 94:
this.$ = new Node(id++,"ASSIGMENTWITHTYPE"); this.$.children.push($$[$0-2]); this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,$$[$0]));
break;
case 95: case 96:
 this.$ = $$[$0-1]; this.$.children.push(new Node(id++,$$[$0]));
break;
case 98:
this.$ = new Node(id++,"DECASSTYPE"); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 99:
this.$ = new Node(id++,"ASSIGNMENTTYPE"); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push($$[$0-1]); this.$.children.push($$[$0]);
break;
case 100:
this.$ = new Node(id++,"ASSIGNMENTTYPEPRIM"); this.$.children.push(new Node(id++,$$[$0-4])); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push($$[$0-1]); this.$.children.push($$[$0]); 
break;
case 101:
this.$ = new Node(id++,"ASSIGNMENTTYPEPRIM"); this.$.children.push(new Node(id++,$$[$0])); 
break;
case 102: case 103:
this.$ = new Node(id++,"VALUETYPE"); this.$.children.push($$[$0]);
break;
case 104:
this.$ = new Node(id++,"PARAMETROUNITARIO"); this.$.children.push(new Node(id++,"(")); this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,")"));
break;
case 105:
this.$ = new Node(id++,"IF"); this.$.children.push($$[$0-1]); if(check_to_add($$[$0]) === true){this.$.children.push($$[$0]);}
break;
case 106:
this.$ = new Node(id++,"CELSE"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"else")); this.$.children.push($$[$0]);
break;
case 107:
this.$ = new Node(id++,"CELSE"); this.$.children.push($$[$0]);
break;
case 108:
this.$ = new Node(id++,"ELSE"); this.$.children.push(new Node(id++,"else")); this.$.children.push($$[$0]);
break;
case 109:
this.$ = new Node(id++,"ELSE"); this.$.children.push(new Node(id++,"epsilon"));
break;
case 110:
this.$ = new Node(id++,"IFF"); this.$.children.push(new Node(id++,"if")); this.$.children.push($$[$0-1]); this.$.children.push($$[$0]);
break;
case 111:
this.$ = new Node(id++,"SWITCH"); this.$.children.push(new Node(id++,"switch")); this.$.children.push($$[$0-4]); this.$.children.push(new Node(id++,"{")); this.$.children.push($$[$0-2]); if(check_to_add($$[$0-1]) === true){this.$.children.push($$[$0-1]);} this.$.children.push(new Node(id++,"}"));
break;
case 112:
this.$ = new Node(id++,"CASES"); this.$.children.push($$[$0-4]); this.$.children.push(new Node(id++,"case")); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,":")); this.$.children.push($$[$0]);
break;
case 113:
this.$ = new Node(id++,"CASES"); this.$.children.push($$[$0-3]); this.$.children.push(new Node(id++,"case")); this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,":"));
break;
case 114:
this.$ = new Node(id++,"CASES"); this.$.children.push(new Node(id++,"case")); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,":")); this.$.children.push($$[$0]);
break;
case 115:
this.$ = new Node(id++,"CASES"); this.$.children.push(new Node(id++,"case")); this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,":")); 
break;
case 116:
this.$ = new Node(id++,"DEFAULT"); this.$.children.push(new Node(id++,"default")); this.$.children.push(new Node(id++,":")); this.$.children.push($$[$0]);
break;
case 117:
this.$ = new Node(id++,"DEFAULT"); this.$.children.push(new Node(id++,"default")); this.$.children.push(new Node(id++,":"));
break;
case 118:
this.$ = new Node(id++,"DEFAULT"); this.$.children.push(new Node(id++,"epsilon"));
break;
case 119:
this.$ = new Node(id++,"WHILE"); this.$.children.push(new Node(id++,"while")); this.$.children.push($$[$0-1]); this.$.children.push($$[$0]);
break;
case 120:
this.$ = new Node(id++,"DOWHILE"); this.$.children.push(new Node(id++,"do")); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"while")); this.$.children.push($$[$0]);
break;
case 121:
this.$ = new Node(id++,"FOR");this.$.children.push(new Node(id++,'for'));this.$.children.push(new Node(id++,'('));if(check_to_add($$[$0-6]) === true){this.$.children.push($$[$0-6]);}this.$.children.push(new Node(id++,';'));this.$.children.push($$[$0-4]);this.$.children.push(new Node(id++,';'));this.$.children.push($$[$0-2]);this.$.children.push(new Node(id++,')'));this.$.children.push($$[$0]);
break;
case 122:
this.$ = new Node(id++,"FOR");this.$.children.push(new Node(id++,'for'));this.$.children.push(new Node(id++,'('));this.$.children.push($$[$0-4]);this.$.children.push($$[$0-3]);this.$.children.push($$[$0-2]);this.$.children.push(new Node(id++,')'));this.$.children.push($$[$0]);
break;
case 123: case 124:
this.$ = new Node(id++,"DEC"); this.$.children.push($$[$0]);
break;
case 125:
this.$ = new Node(id++,"DEC"); this.$.children.push(new Node(id++,"epsilon"));
break;
case 126: case 127:
this.$ = new Node(id++,"FINON"); this.$.children.push(new Node(id++,$$[$0]));
break;
case 128: case 129:
this.$ = new Node(id++,"DECINC"); this.$.children.push(new Node(id++,$$[$0]));
break;
case 130:
this.$ = new Node(id++,"PRINT");this.$.children.push(new Node(id++,$$[$0-3]));this.$.children.push(new Node(id++,"("));this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,")"));
break;
case 131:
this.$ = new Node(id++,"DATAPRINT"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 132:
this.$ = new Node(id++,"DATAPRINT"); this.$.children.push($$[$0]);
break;
case 133:
this.$ = new Node(id++,"EXPRT"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 134:
this.$ = new Node(id++,"TERNARIO"); this.$.children.push($$[$0-4]); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 135:
this.$ = new Node(id++,"EXPRT"); this.$.children.push($$[$0]);
break;
case 136:
this.$ = new Node(id++,"EXPRT2"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 137:
this.$ = new Node(id++,"EXPRT2"); this.$.children.push($$[$0]);
break;
case 138:
this.$ = new Node(id++,"EXPR"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"!=")); this.$.children.push($$[$0]);
break;
case 139:
this.$ = new Node(id++,"EXPR"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"==")); this.$.children.push($$[$0]);
break;
case 140:
this.$ = new Node(id++,"EXPR"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"===")); this.$.children.push($$[$0]);
break;
case 141:
this.$ = new Node(id++,"EXPR"); this.$.children.push($$[$0]);
break;
case 142:
this.$ = new Node(id++,"EXPR1"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,">")); this.$.children.push($$[$0]);
break;
case 143:
this.$ = new Node(id++,"EXPR1"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"<")); this.$.children.push($$[$0]);
break;
case 144:
this.$ = new Node(id++,"EXPR1"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,">=")); this.$.children.push($$[$0]);
break;
case 145:
this.$ = new Node(id++,"EXPR1"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"<=")); this.$.children.push($$[$0]);
break;
case 146:
this.$ = new Node(id++,"EXPR1"); this.$.children.push($$[$0]);
break;
case 147:
this.$ = new Node(id++,"EXP"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"+")); this.$.children.push($$[$0]);
break;
case 148:
this.$ = new Node(id++,"EXP"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"-")); this.$.children.push($$[$0]);
break;
case 149:
this.$ = new Node(id++,"EXP"); this.$.children.push($$[$0]);
break;
case 150:
this.$ = new Node(id++,"EXP1"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"*")); this.$.children.push($$[$0]);
break;
case 151:
this.$ = new Node(id++,"EXP1"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"/")); this.$.children.push($$[$0]);
break;
case 152:
this.$ = new Node(id++,"EXP1"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"%")); this.$.children.push($$[$0]);
break;
case 153:
this.$ = new Node(id++,"EXP1"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"^")); this.$.children.push($$[$0]);
break;
case 154:
this.$= new Node(id++,"EXP1"); this.$.children.push($$[$0]);
break;
case 155:
this.$ = new Node(id++,"EXP2");this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 156:
this.$ = new Node(id++,"EXP2"); this.$.children.push($$[$0]);
break;
case 157: case 165: case 166:
this.$ = new Node(id++,"EXP3");this.$.children.push(new Node(id++,$$[$0]));
break;
case 158:
this.$ = new Node(id++,"EXP3");this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push(new Node(id++,$$[$0]));
break;
case 159:
this.$ = new Node(id++,"EXP3");this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 160:
this.$ = new Node(id++,"EXP3");this.$.children.push(new Node(id++,"("));this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,")"));
break;
case 161: case 162: case 163:
this.$ = new Node(id++,"EXP3"); this.$.children.push(new Node(id++,$$[$0]));
break;
case 164: case 167:
this.$ = new Node(id++,"EXP3"); this.$.children.push($$[$0]);
break;
case 168:
this.$ = new Node(id++,"EXP3"); this.$.children.push($$[$0-1]); this.$.children.push($$[$0]);
break;
case 169:
this.$ = new Node(id++,"EXP3");this.$.children.push(new Node(id++,$$[$0-1]));this.$.children.push(new Node(id++,$$[$0]));
break;
case 170:
this.$ = new Node(id++,"EXP3");this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push($$[$0-1]);this.$.children.push(new Node(id++,$$[$0]));
break;
case 171:
this.$ = new Node(id++,"EXP3");this.$.children.push(new Node(id++,$$[$0-4]));this.$.children.push(new Node(id++,$$[$0-3]));this.$.children.push(new Node(id++,$$[$0-2]));this.$.children.push($$[$0-1]);this.$.children.push(new Node(id++,$$[$0]));
break;
case 172:
this.$ = new Node(id++,"EXP3");this.$.children.push(new Node(id++,$$[$0-2]));this.$.children.push(new Node(id++,$$[$0-1]));this.$.children.push($$[$0]);
break;
case 173:
this.$ = new Node(id++,"IDVALOR");this.$.children.push(new Node(id++,$$[$0-1])); if(check_to_add($$[$0]) === true){this.$.children.push($$[$0]);}
break;
case 174:
this.$ = new Node(id++,"IDVALOR"); this.$.children.push(new Node(id++,$$[$0-2]));  this.$.children.push($$[$0-1]); this.$.children.push($$[$0]);
break;
case 175:
this.$ = new Node(id++,"ARREGLO"); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]); 
break;
case 176:
this.$ = new Node(id++,"ARREGLO"); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,$$[$0])); 
break;
case 177: case 178:
this.$ = new Node(id++,"IDVALOR2");this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 179:
this.$ = new Node(id++,"IDVALOR2"); this.$.children.push(new Node(id++,"epsilon"));
break;
case 180:
this.$ = new Node(id++,"OPERADORC"); this.$.children.push(new Node(id++,$$[$0]));
break;
case 181: case 184:
this.$ = new Node(id++,"OPERADORC"); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,$$[$0]));
break;
case 182: case 183:
this.$ = new Node(id++,"OPERADORC"); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push(new Node(id++,$$[$0]));
break;
case 185:
this.$ = new Node(id++,"CALLF"); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]); 
break;
case 186:
this.$ = new Node(id++,"PARAMETERS"); this.$.children.push($$[$0-1]); this.$.children.push($$[$0]); 
break;
case 187:
this.$ = new Node(id++,"PARAMETERS"); this.$.children.push(new Node(id++,$$[$0])); 
break;
case 188:
this.$ = new Node(id++,"IDVALOR"); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push($$[$0-1]); this.$.children.push($$[$0]); 
break;
case 189:
this.$ = new Node(id++,"PARAMETERSPRIM"); this.$.children.push(new Node(id++,$$[$0])); 
break;
case 190:
this.$ = new Node(id++,"IDVALORASS");this.$.children.push(new Node(id++,$$[$0-1])); if(check_to_add($$[$0]) === true){this.$.children.push($$[$0]);}
break;
case 191:
this.$ = new Node(id++,"IDVALORASS"); this.$.children.push(new Node(id++,$$[$0-2]));  this.$.children.push($$[$0-1]); this.$.children.push($$[$0]);
break;
case 192:
this.$ = new Node(id++,"IDVALOR2ASS");this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 193:
this.$ = new Node(id++,"IDVALOR2ASS"); this.$.children.push(new Node(id++,$$[$0-4])); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,$$[$0]));
break;
case 194:
this.$ = new Node(id++,"GRAFICAR"); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push(new Node(id++,$$[$0])); 
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:8,7:$V1,8:$V2,17:4,18:5,19:6,20:7,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:$V3,57:19,58:$V4,59:$V5,73:21,74:20,84:22,89:24,92:34,93:$V6,94:$V7,99:$V8,100:$V9,101:$Va,108:$Vb,145:$Vc},{1:[3]},{5:[1,36]},{1:[2,2]},{2:$V0,4:37,5:[2,7],6:8,7:$V1,8:$V2,17:4,18:5,19:6,20:7,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:$V3,57:19,58:$V4,59:$V5,73:21,74:20,84:22,89:24,92:34,93:$V6,94:$V7,99:$V8,100:$V9,101:$Va,108:$Vb,145:$Vc},o($Vd,[2,8]),{13:[1,38]},o($Vd,[2,10]),o($Vd,[2,11]),o($Vd,[2,12]),o($Vd,[2,13]),o($Vd,[2,14]),{13:[1,39]},o($Vd,[2,16]),{13:[1,40]},{13:[1,41]},{13:[1,42]},o($Vd,[2,20]),{8:[1,43]},{8:[1,46],60:44,61:45},{9:[1,49],75:48,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:47},{13:[1,56]},{13:[1,57]},{8:[1,58]},o($Vk,[2,109],{90:59,91:[1,60]}),{30:$Vl,88:61},{30:$Vl,88:63},{10:$Vm,67:64},{30:[1,66]},{30:[1,67]},o($Vn,$Vo,{134:69,135:70,76:71,143:72,30:$Vp,52:$Vq,106:$Vr,107:$Vs,132:$Vt}),{30:[1,77]},{8:[2,52]},{8:[2,53]},o($Vu,[2,107]),{30:$Vl,88:78},{1:[2,1]},{5:[2,6]},o($Vd,[2,9]),o($Vd,[2,15]),o($Vd,[2,17]),o($Vd,[2,18]),o($Vd,[2,19]),{30:[1,79]},o($Vv,[2,54]),o($Vv,$Vw,{62:80,63:81,14:$Vx}),o($Vy,$Vz,{64:83,9:$VA,15:[1,84]}),{13:[1,86]},{9:[1,87]},{8:$VB,10:$VC,27:105,30:$VD,47:$VE,52:$VF,65:88,66:89,74:108,78:$VG,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{9:[2,88]},{9:[2,89]},{9:[2,90]},{9:[2,91]},{9:[2,92]},{9:[2,93]},o($Vk,[2,95]),o($Vk,[2,96]),{9:[1,112]},o($Vk,[2,105]),{10:$Vm,67:114,92:113,93:$V6},{10:[1,115]},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,65:116,74:108,78:$VG,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{10:$Vm,67:117},{99:[1,118]},{2:$VO,8:$V2,12:[1,121],19:123,20:124,21:125,22:126,23:127,24:128,25:129,26:130,27:131,28:135,39:122,57:19,58:$V4,59:$V5,68:119,69:120,70:$VP,71:$VQ,72:$VR,73:21,74:20,84:22,89:24,92:34,93:$V6,94:$V7,99:$V8,100:$V9,101:$Va,108:$Vb,145:$Vc},{8:$VS,13:[2,125],19:138,57:19,58:$V4,59:$V5,73:139,74:140,102:137},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,65:143,74:108,78:$VG,109:142,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{8:$VB,27:105,30:$VD,32:[1,146],47:$VE,52:$VF,65:145,74:108,78:$VG,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN,141:144},o($VT,[2,173]),o($Vn,$Vo,{134:147,143:148,132:$Vt}),o($VU,[2,86]),{13:[2,190]},{8:[1,153],74:149,84:151,133:150,136:$VV,137:$VW,138:$VX,139:$VY,140:$VZ,144:[1,152]},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,65:159,74:108,78:$VG,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},o($V_,[2,128]),o($V_,[2,129]),{32:[1,160]},{10:$Vm,67:161},{8:$V$,31:162,32:[1,163],54:164},o($Vv,[2,55]),o($Vv,$Vw,{63:81,62:166,14:$Vx}),{8:[1,167]},o($Vy,[2,58]),{8:$V01,16:168,42:170,43:$V11,44:$V21,45:$V31,46:$V41,47:$V51,48:$V61},{8:$VB,10:$VC,27:105,30:$VD,47:$VE,52:$VF,65:177,66:178,74:108,78:$VG,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},o($Vk,[2,94]),{8:$VB,27:105,30:$VD,47:$VE,52:$VF,65:179,74:108,78:$VG,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},o($VU,[2,87],{110:$V71,111:$V81}),{13:[2,97]},o($V91,[2,135],{113:[1,182]}),{8:[1,184],85:183},o($Va1,[2,137],{115:[1,185],116:[1,186],117:[1,187]}),o($Vb1,[2,141],{49:[1,189],50:[1,188],119:[1,190],120:[1,191]}),o($Vc1,[2,146],{77:[1,192],78:[1,193]}),o($Vd1,[2,149],{79:$Ve1,80:[1,194],81:[1,195],82:[1,196]}),o($V_,[2,154]),{8:$VB,27:105,30:$VD,47:$VE,52:$VF,74:108,78:$VG,123:198,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},o($V_,[2,156]),o($V_,[2,157]),{8:$Vf1,74:200,126:[1,199]},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,65:202,74:108,78:$VG,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},o($V_,[2,161],{132:[1,203]}),o($V_,[2,162]),o($V_,[2,163]),o($V_,[2,164]),o($V_,[2,165]),o($V_,[2,166]),o($V_,[2,167],{76:204,106:$Vr,107:$Vs}),{8:$VB,27:105,30:$VD,47:$VE,52:$VF,53:[1,205],65:143,74:108,78:$VG,109:206,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{48:[1,207]},o([12,13,14,15,32,49,50,53,77,78,79,80,81,82,104,105,106,107,110,111,113,115,116,117,119,120],$Vo,{134:69,135:208,30:$Vp,52:$Vq,132:$Vg1}),{10:[1,210]},o($Vu,[2,106]),o($Vk,[2,108]),{95:211,97:[1,212]},{32:[1,213],110:$V71,111:$V81},o($Vk,[2,119]),{30:$Vl,88:214},o($Vu,[2,65]),{12:[1,215]},o($Vu,[2,67]),o($Vh1,[2,69],{57:19,74:20,73:21,84:22,89:24,92:34,39:122,19:123,20:124,21:125,22:126,23:127,24:128,25:129,26:130,27:131,28:135,69:216,2:$VO,8:$V2,58:$V4,59:$V5,70:$VP,71:$VQ,72:$VR,93:$V6,94:$V7,99:$V8,100:$V9,101:$Va,108:$Vb,145:$Vc}),{13:[1,217]},o($Vi1,[2,71]),o($Vi1,[2,72]),o($Vi1,[2,73]),o($Vi1,[2,74]),{13:[1,218]},o($Vi1,[2,76]),{13:[1,219]},{13:[1,220]},{13:[1,221]},{13:[1,222]},{8:$VB,13:[1,224],27:105,30:$VD,47:$VE,52:$VF,65:223,74:108,78:$VG,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{13:[1,225]},o($Vi1,[2,84]),{13:[1,226]},{13:[2,123],103:227,104:[1,228],105:[1,229]},{13:[2,124]},{9:[1,230],75:48,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj},o($Vn,$Vo,{134:69,76:71,135:208,52:$Vq,106:$Vr,107:$Vs,132:$Vg1}),{32:[1,231]},o($Vj1,[2,132],{14:[1,232],110:$V71,111:$V81}),o($V_,[2,185]),{14:$Vk1,32:$Vl1,110:$V71,111:$V81,142:233},o($V_,[2,187]),o($VT,[2,174]),{13:[2,191]},o($VT,[2,177]),o($VT,[2,178]),{13:[2,192]},{30:[1,236]},o($Vn,$Vo,{134:69,135:70,143:72,52:$Vq,132:$Vt}),o($VT,[2,180]),{30:[1,237]},{30:[1,238]},{30:[1,239]},{30:[1,240]},{53:[1,241],110:$V71,111:$V81},{13:[2,194]},o($Vu,[2,110]),{32:[1,242]},{10:$Vm1,15:$Vn1,33:243},{14:$Vo1,32:$Vp1,55:245,56:246},{15:[1,248]},o($Vv,[2,56]),o($Vy,$Vz,{64:249,9:$VA,15:[1,250]}),o($Vy,$Vz,{64:251,9:$VA}),{49:[1,252]},o($Vq1,[2,44],{51:253,52:$Vr1}),o($Vs1,[2,36]),o($Vs1,[2,37]),o($Vs1,[2,38]),o($Vs1,[2,39]),o($Vs1,[2,40]),o($Vs1,[2,41]),o($Vy,[2,62],{110:$V71,111:$V81}),o($Vy,[2,63]),o($VU,[2,85],{110:$V71,111:$V81}),{8:$VB,27:105,30:$VD,47:$VE,52:$VF,65:255,74:108,78:$VG,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,65:256,74:108,78:$VG,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,74:108,78:$VG,112:257,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},o($Vt1,[2,98]),{15:[1,258]},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,74:108,78:$VG,114:259,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,74:108,78:$VG,114:260,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,74:108,78:$VG,114:261,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,74:108,78:$VG,118:262,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,74:108,78:$VG,118:263,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,74:108,78:$VG,118:264,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,74:108,78:$VG,118:265,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,74:108,78:$VG,121:266,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,74:108,78:$VG,121:267,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,74:108,78:$VG,122:268,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,74:108,78:$VG,122:269,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,74:108,78:$VG,122:270,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,74:108,78:$VG,122:271,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},o($V_,[2,155]),o($V_,[2,158]),o($V_,[2,159]),o($VT,$Vo,{134:69,135:208,52:$Vq,132:$Vg1}),{32:[1,272],110:$V71,111:$V81},{133:273,136:$VV,137:$VW,138:$VX,139:$VY,140:$VZ},o($V_,[2,168]),o($V_,[2,169]),{53:[1,274]},{30:[1,275]},o($VT,$Vo,{134:147,132:$Vg1}),{8:$Vf1,74:149,133:150,136:$VV,137:$VW,138:$VX,139:$VY,140:$VZ},{8:[1,277],11:276},{12:[2,118],96:278,97:[1,279],98:[1,280]},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,65:281,74:108,78:$VG,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},o([10,13],[2,104]),{13:[2,120]},o($Vu,[2,66]),o($Vh1,[2,68]),o($Vi1,[2,70]),o($Vi1,[2,75]),o($Vi1,[2,77]),o($Vi1,[2,78]),o($Vi1,[2,79]),o($Vi1,[2,80]),{13:[1,282],110:$V71,111:$V81},o($Vi1,[2,82]),o($Vi1,[2,83]),{8:$VB,27:105,30:$VD,47:$VE,52:$VF,65:283,74:108,78:$VG,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{8:$Vf1,74:284},{8:[2,126]},{8:[2,127]},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,65:88,74:108,78:$VG,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{13:[2,130]},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,65:143,74:108,78:$VG,109:285,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},o($V_,[2,186]),{8:$VB,27:105,30:$VD,47:$VE,52:$VF,65:286,74:108,78:$VG,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},o($V_,[2,189]),{8:$VB,27:105,30:$VD,47:$VE,52:$VF,65:287,74:108,78:$VG,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,65:288,74:108,78:$VG,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{32:[1,289]},{32:[1,290]},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,65:291,74:108,78:$VG,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},o($Vu1,[2,176],{135:292,52:$Vq}),{10:$Vm1,15:$Vn1,33:293},{10:$Vv1,34:294},{8:$V01,16:297,40:296,41:[1,298],42:170,43:$V11,44:$V21,45:$V31,46:$V41,47:$V51,48:$V61},{32:[2,47]},{14:$Vo1,32:$Vp1,55:299,56:246},{8:[1,300]},{8:$V01,16:301,42:170,43:$V11,44:$V21,45:$V31,46:$V41,47:$V51,48:$V61},o($Vy,[2,60]),{8:$V01,16:302,42:170,43:$V11,44:$V21,45:$V31,46:$V41,47:$V51,48:$V61},o($Vy,[2,59]),{8:$V01,16:303,42:170,43:$V11,44:$V21,45:$V31,46:$V41,47:$V51,48:$V61},o($Vq1,[2,43]),{53:[1,304]},o($V91,[2,133]),{15:[1,305],110:$V71,111:$V81},o($Va1,[2,136]),{8:$VB,10:$VC,27:105,30:$VD,47:$VE,52:$VF,65:307,66:308,74:108,78:$VG,86:306,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},o($Vb1,[2,138]),o($Vb1,[2,139]),o($Vb1,[2,140]),o($Vc1,[2,142]),o($Vc1,[2,143]),o($Vc1,[2,144]),o($Vc1,[2,145]),o($Vd1,[2,147]),o($Vd1,[2,148]),o($Vw1,[2,150],{79:$Ve1}),o($Vw1,[2,151],{79:$Ve1}),o($Vw1,[2,152],{79:$Ve1}),o($Vw1,[2,153],{79:$Ve1}),o($V_,[2,160]),o($V_,[2,172]),o($V_,[2,170]),{8:$VB,27:105,30:$VD,47:$VE,52:$VF,65:309,74:108,78:$VG,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{12:[1,310],14:[1,311]},{15:[1,312]},{12:[1,313]},{8:$VB,27:105,30:$VD,47:$VE,52:$VF,65:314,74:108,78:$VG,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{15:[1,315]},{15:[1,316],110:$V71,111:$V81},o($Vi1,[2,81]),{13:[1,317],110:$V71,111:$V81},{32:[1,318]},o($Vj1,[2,131]),{14:$Vk1,32:$Vl1,110:$V71,111:$V81,142:319},{32:[1,320],110:$V71,111:$V81},{32:[1,321],110:$V71,111:$V81},o($VT,[2,182]),o($VT,[2,183]),{32:[1,322],110:$V71,111:$V81},o($Vu1,[2,175]),{10:$Vv1,34:323},o($Vd,[2,22]),{2:$VO,8:$V2,12:[1,326],19:123,20:124,21:125,22:126,23:127,24:128,25:129,26:130,27:131,28:135,29:$Vx1,35:329,36:324,37:325,38:327,39:328,57:19,58:$V4,59:$V5,70:$VP,71:$VQ,72:$VR,73:21,74:20,84:22,89:24,92:34,93:$V6,94:$V7,99:$V8,100:$V9,101:$Va,108:$Vb,145:$Vc},{10:[2,32]},{10:[2,34]},{10:[2,35]},{32:[2,48]},{15:[1,331]},o($Vy1,[2,50]),o($Vy,$Vz,{64:332,9:$VA}),{50:[1,333]},o($Vq1,[2,46],{51:334,52:$Vr1}),{8:$VB,27:105,30:$VD,47:$VE,52:$VF,65:335,74:108,78:$VG,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},{12:$Vz1,14:$VA1,87:336},o($VB1,[2,102],{110:$V71,111:$V81}),o($VB1,[2,103]),{32:[1,339],110:$V71,111:$V81},{13:[1,340]},{8:[1,341]},{8:$V01,16:342,42:170,43:$V11,44:$V21,45:$V31,46:$V41,47:$V51,48:$V61},o($Vk,[2,111]),{15:[1,343],110:$V71,111:$V81},{2:$VO,8:$V2,12:[2,117],19:123,20:124,21:125,22:126,23:127,24:128,25:129,26:130,27:131,28:135,39:122,57:19,58:$V4,59:$V5,69:344,70:$VP,71:$VQ,72:$VR,73:21,74:20,84:22,89:24,92:34,93:$V6,94:$V7,99:$V8,100:$V9,101:$Va,108:$Vb,145:$Vc},o($Vh1,[2,115],{57:19,74:20,73:21,84:22,89:24,92:34,39:122,19:123,20:124,21:125,22:126,23:127,24:128,25:129,26:130,27:131,28:135,69:345,2:$VO,8:$V2,58:$V4,59:$V5,70:$VP,71:$VQ,72:$VR,93:$V6,94:$V7,99:$V8,100:$V9,101:$Va,108:$Vb,145:$Vc}),{8:$VS,73:346,74:140},{10:$Vm,67:347},o($V_,[2,188]),{13:[2,193]},o($VT,[2,181]),o($VT,[2,184]),o($Vd,[2,21]),o($VC1,[2,25]),{12:[1,348]},o($VC1,[2,27]),{2:$VO,8:$V2,12:[2,29],19:123,20:124,21:125,22:126,23:127,24:128,25:129,26:130,27:131,28:135,29:$Vx1,35:329,37:349,38:327,39:328,57:19,58:$V4,59:$V5,70:$VP,71:$VQ,72:$VR,73:21,74:20,84:22,89:24,92:34,93:$V6,94:$V7,99:$V8,100:$V9,101:$Va,108:$Vb,145:$Vc},o($VD1,[2,30]),o($VD1,[2,31]),{8:[1,350]},{8:$V01,16:351,42:170,43:$V11,44:$V21,45:$V31,46:$V41,47:$V51,48:$V61},o($Vy,[2,61]),o($Vq1,[2,42]),o($Vq1,[2,45]),o($V91,[2,134]),o($Vt1,[2,99]),{8:[1,352]},o($Vt1,[2,101]),o($V_,[2,171]),o($Vd,[2,3]),{15:[1,353]},o($VB1,[2,5]),o($Vh1,[2,113],{57:19,74:20,73:21,84:22,89:24,92:34,39:122,19:123,20:124,21:125,22:126,23:127,24:128,25:129,26:130,27:131,28:135,69:354,2:$VO,8:$V2,58:$V4,59:$V5,70:$VP,71:$VQ,72:$VR,93:$V6,94:$V7,99:$V8,100:$V9,101:$Va,108:$Vb,145:$Vc}),{12:[2,116]},o($Vh1,[2,114]),{32:[1,355]},o($Vk,[2,122]),o($VC1,[2,26]),{12:[2,28]},{30:[1,356]},o($Vy1,[2,51]),{15:[1,357]},{8:$V01,16:358,42:170,43:$V11,44:$V21,45:$V31,46:$V41,47:$V51,48:$V61},o($Vh1,[2,112]),{10:$Vm,67:359},{8:$V$,31:360,32:[1,361],54:164},{8:$VB,10:$VC,27:105,30:$VD,47:$VE,52:$VF,65:307,66:308,74:108,78:$VG,86:362,112:90,114:92,118:93,121:94,122:95,123:96,124:$VH,125:98,126:$VI,127:$VJ,128:$VK,129:$VL,130:$VM,131:$VN},o($VB1,[2,4]),o($Vk,[2,121]),{32:[1,363]},{10:$Vm1,15:$Vn1,33:364},{12:$Vz1,14:$VA1,87:365},{10:$Vm1,15:$Vn1,33:366},{10:$Vv1,34:367},o($Vt1,[2,100]),{10:$Vv1,34:368},o($VD1,[2,24]),o($VD1,[2,23])],
defaultActions: {3:[2,2],32:[2,52],33:[2,53],36:[2,1],37:[2,6],50:[2,88],51:[2,89],52:[2,90],53:[2,91],54:[2,92],55:[2,93],72:[2,190],89:[2,97],139:[2,124],148:[2,191],151:[2,192],160:[2,194],214:[2,120],228:[2,126],229:[2,127],231:[2,130],245:[2,47],296:[2,32],297:[2,34],298:[2,35],299:[2,48],320:[2,193],344:[2,116],349:[2,28]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

     let id = 0;
     let root;

     function createAST(root) {
          let ret = "digraph G {node[shape=rectangle];\n";
          ret += loopAST(root);
          ret += "\n}";
          return ret;
     }

     function loopAST(root) {
          let ret = "";
          if (root !== null) {
               //console.log(root.children.length);
               for (let i = 0; i < root.children.length; i++) {

                    if (root.children.length > 0) {
                         try
                         {
                         root.value = root.value.replace(/\"/g, "");
                         root.children[i].value = root.children[i].value.replace(/\"/g, "");
                         root.children[i].value = root.children[i].value.replace(/\\/g, "#");
                         ret += "\"" + root.id + ". " + root.value + "\"->\"" + root.children[i].id + ". " + root.children[i].value + "\"" + "\n";
                         ret += loopAST(root.children[i]);
                         }catch(e){ console.log(e); console.log(e)}
                    }
               }
          }
          return ret;
     }


     function check_to_add(node)
     {
          if(node.children.length === 1 && node.children[0].value === "epsilon")
               return false;
          else 
               return true;
     }
     /*
import Node from './clases/Node';
export 
     */
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario simple línea
break;
case 1:// comentario multiple líneas
break;
case 2:return 106;
break;
case 3:return 107;
break;
case 4:return 77;
break;
case 5:return 78;   
break;
case 6:return 79;
break;
case 7:return 80;
break;
case 8:return 81;
break;
case 9:return 82;
break;
case 10:return 111;
break;
case 11:return 119;
break;
case 12:return 120;
break;
case 13:return 49;
break;
case 14:return 50;
break;
case 15:return 116;
break;
case 16:return 117;
break;
case 17:return 115;
break;
case 18:return 52;     
break;
case 19:return 53;
break;
case 20:return 10;     
break;
case 21:return 12;
break;
case 22:return 30;     
break;
case 23:return 32;
break;
case 24:return 14;
break;
case 25:return 132;
break;
case 26:return 9;
break;
case 27:return 13;
break;
case 28:return 15;
break;
case 29:return 124;
break;
case 30:return 113;
break;
case 31:return 110;
break;
case 32:return 130;
break;
case 33:return 47;
break;
case 34:return 29;
break;
case 35:return 48;
break;
case 36:return 46;
break;
case 37:return 59;
break;
case 38:return 58;
break;
case 39:return 7;
break;
case 40:return 45;
break;
case 41:return 128;
break;
case 42:return 129;
break;
case 43:return 93;
break;
case 44:return 91;
break;
case 45:return 94;
break;
case 46:return 97;
break;
case 47:return 98;
break;
case 48:return 70;
break;
case 49:return 71;
break;
case 50:return 72;
break;
case 51:return 108;
break;
case 52:return 41;
break;
case 53:return 101;
break;
case 54:return 99;
break;
case 55:return 100;
break;
case 56:return 44;
break;
case 57:return 105;
break;
case 58:return 104;
break;
case 59:return 144;
break;
case 60:return 136;
break;
case 61:return 145;
break;
case 62:return 137;
break;
case 63:return 138;
break;
case 64:return 139;
break;
case 65:return 140;
break;
case 66:return 131;
break;
case 67:
break;
case 68:return 126;
break;
case 69:return 127;
break;
case 70:return 8;
break;
case 71:return 5;
break;
case 72: 
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\?)/,/^(?:>=)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:===)/,/^(?:!=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\.)/,/^(?:=)/,/^(?:;)/,/^(?::)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:null\b)/,/^(?:undefined\b)/,/^(?:function\b)/,/^(?:Array\b)/,/^(?:number\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:type\b)/,/^(?:string\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:console\.log\b)/,/^(?:void\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:boolean\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:push\b)/,/^(?:length\b)/,/^(?:graficar_ts\b)/,/^(?:CharAt\b)/,/^(?:ToLowerCase\b)/,/^(?:ToUpperCase\b)/,/^(?:Concat\b)/,/^(?:new\b)/,/^(?:[ \r\t\n]+)/,/^(?:[0-9]+\.[0-9]+\b|[0-9]+\b)/,/^(?:([\"](\\"|[^"])*[^\\][\"])|[\"][\"]|[\'][^']*[\']|`[^`]*`)/,/^(?:([a-zA-Z"_"])[a-z0-9A-Z"_""ñ""Ñ"]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ast;
exports.Parser = ast.Parser;
exports.parse = function () { return ast.parse.apply(ast, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
